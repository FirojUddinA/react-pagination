{"version":3,"sources":["Pagination.js","components/Posts.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","pages","setCurrentPage","numberOfPages","i","push","useState","currentButton","setCurrentButton","arrOfCurrButtons","setArrOfCurrButtons","useEffect","tempNumberOfPages","dotsLeft","length","sliced","slice","sliced1","sliced2","className","href","onClick","prev","map","item","index","key","Posts","posts","post","title","App","setPosts","loading","setLoading","currentPage","postsPerPage","a","axios","get","res","data","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","howManyPages","Math","ceil","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAqGeA,MAnGf,YAIE,IAJmD,IAAD,IAA9BC,aAA8B,MAAtB,GAAsB,EAAlBC,EAAkB,EAAlBA,eAG1BC,EAAgB,GACbC,EAAI,EAAGA,GAAKH,EAAOG,IAC1BD,EAAcE,KAAKD,GAL6B,MASRE,mBAAS,GATD,mBAS3CC,EAT2C,KAS5BC,EAT4B,OAYFF,mBAAS,IAZP,mBAY3CG,EAZ2C,KAYzBC,EAZyB,KAkElD,OApDAC,qBAAU,WACR,IAAIC,EAAiB,YAAOH,GAGxBI,EAAW,OAGf,GAAIV,EAAcW,OAAS,EACzBF,EAAoBT,OAGjB,GAAII,GAAiB,GAAKA,GAAiB,EAC9CK,EAAoB,CAAC,EAAG,EAAG,EAAG,EATd,MAS8BT,EAAcW,aAGzD,GAAsB,IAAlBP,EAAqB,CAC5B,IAAMQ,EAASZ,EAAca,MAAM,EAAG,GACtCJ,EAAiB,sBAAOG,GAAP,CAdD,MAc6BZ,EAAcW,cAGxD,GAAIP,EAAgB,GAAKA,EAAgBJ,EAAcW,OAAS,EAAG,CACtE,IAAMG,EAAUd,EAAca,MAAMT,EAAgB,EAAGA,GACjDW,EAAUf,EAAca,MAAMT,EAAeA,EAAgB,GACnEK,EAAiB,CAAK,EAAGC,GAAR,mBAAqBI,GAArB,YAAiCC,GAAjC,CAlBH,OAkBwDf,EAAcW,cAGjF,GAAIP,EAAgBJ,EAAcW,OAAS,EAAG,CACjD,IAAMC,EAASZ,EAAca,MAAMb,EAAcW,OAAS,GAC1DF,EAAiB,CAAK,EAAGC,GAAR,mBAAqBE,QAzBtB,QA4BTR,EAMPC,EAAiBC,EAAiBA,EAAiBK,OAAO,GAAK,GAhCjD,SAkCPP,EACPC,EAAiBC,EAAiB,GAAK,GAGhCF,IAAkBM,GACzBL,EAAiBC,EAAiB,GAAK,GAGzCC,EAAoBE,GACpBV,EAAeK,KACd,CAACA,IAIF,yBAAKY,UAAU,wBACb,uBACEC,KAAK,IACLD,UAAS,UAAuB,IAAlBZ,EAAsB,WAAa,IACjDc,QAAS,kBAAMb,GAAiB,SAAAc,GAAI,OAAIA,GAAQ,EAAIA,EAAOA,EAAO,OAHpE,QAQCb,EAAiBc,KAAK,SAACC,EAAMC,GAC5B,OAAO,uBACLL,KAAK,IACLM,IAAKD,EACLN,UAAS,UAAKZ,IAAkBiB,EAAO,SAAW,IAClDH,QAAS,kBAAMb,EAAiBgB,KAE/BA,MAIL,uBACEJ,KAAK,IACLD,UAAS,UAAKZ,IAAkBJ,EAAcW,OAAS,WAAa,IACpEO,QAAS,kBAAMb,GAAiB,SAAAc,GAAI,OAAIA,GAAQnB,EAAcW,OAASQ,EAAOA,EAAO,OAHvF,U,iBC7ESK,MAVf,YAAyB,IAATC,EAAQ,EAARA,MACd,OACE,wBAAIT,UAAU,mBACXS,EAAML,KAAI,SAACM,EAAMJ,GAChB,OAAQ,wBAAIC,IAAKD,EAAON,UAAU,mBAAmBU,EAAKC,YCiCnDC,MAnCf,WAAgB,IAAD,EACazB,mBAAS,IADtB,mBACNsB,EADM,KACCI,EADD,OAEiB1B,oBAAS,GAF1B,mBAEN2B,EAFM,KAEGC,EAFH,OAGyB5B,mBAAS,GAHlC,mBAGN6B,EAHM,KAGOjC,EAHP,OAIUI,mBAAS,IAAzB8B,EAJM,oBAiBb,GAXAzB,qBAAU,YACQ,uCAAG,4BAAA0B,EAAA,6DACjBH,GAAW,GADM,SAECI,IAAMC,IAAI,8CAFX,OAEXC,EAFW,OAGjBR,EAASQ,EAAIC,MACbP,GAAW,GAJM,2CAAH,qDAOhBQ,KACC,IAECT,GAA4B,IAAjBL,EAAMd,OACnB,OAAO,0CAGT,IAAM6B,EAAkBR,EAAcC,EAChCQ,EAAmBD,EAAkBP,EACrCS,EAAejB,EAAMZ,MAAM4B,EAAkBD,GAC7CG,EAAeC,KAAKC,KAAKpB,EAAMd,OAAOsB,GAE5C,OACE,yBAAKjB,UAAU,kBACb,wBAAIA,UAAU,qBAAd,WACA,kBAAC,EAAD,CAAOS,MAAOiB,IACd,kBAAC,EAAD,CAAY5C,MAAS6C,EAAc5C,eAAgBA,MCtBrC+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.04bb8152.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Pagination({ pages = 10, setCurrentPage }) {\r\n\r\n  //Set number of pages\r\n  const numberOfPages = []\r\n  for (let i = 1; i <= pages; i++) {\r\n    numberOfPages.push(i)\r\n  }\r\n\r\n  // Current active button number\r\n  const [currentButton, setCurrentButton] = useState(1)\r\n\r\n  // Array of buttons what we see on the page\r\n  const [arrOfCurrButtons, setArrOfCurrButtons] = useState([])\r\n\r\n  useEffect(() => {\r\n    let tempNumberOfPages = [...arrOfCurrButtons]\r\n\r\n    let dotsInitial = '...'\r\n    let dotsLeft = '... '\r\n    let dotsRight = ' ...'\r\n\r\n    if (numberOfPages.length < 6) {\r\n      tempNumberOfPages = numberOfPages\r\n    }\r\n\r\n    else if (currentButton >= 1 && currentButton <= 3) {\r\n      tempNumberOfPages = [1, 2, 3, 4, dotsInitial, numberOfPages.length]\r\n    }\r\n\r\n    else if (currentButton === 4) {\r\n      const sliced = numberOfPages.slice(0, 5)\r\n      tempNumberOfPages = [...sliced, dotsInitial, numberOfPages.length]\r\n    }\r\n\r\n    else if (currentButton > 4 && currentButton < numberOfPages.length - 2) {               // from 5 to 8 -> (10 - 2)\r\n      const sliced1 = numberOfPages.slice(currentButton - 2, currentButton)                 // sliced1 (5-2, 5) -> [4,5] \r\n      const sliced2 = numberOfPages.slice(currentButton, currentButton + 1)                 // sliced1 (5, 5+1) -> [6]\r\n      tempNumberOfPages = ([1, dotsLeft, ...sliced1, ...sliced2, dotsRight, numberOfPages.length]) // [1, '...', 4, 5, 6, '...', 10]\r\n    }\r\n    \r\n    else if (currentButton > numberOfPages.length - 3) {                 // > 7\r\n      const sliced = numberOfPages.slice(numberOfPages.length - 4)       // slice(10-4) \r\n      tempNumberOfPages = ([1, dotsLeft, ...sliced])                        \r\n    }\r\n    \r\n    else if (currentButton === dotsInitial) {\r\n      //Â [1, 2, 3, 4, \"...\", 10].length = 6 - 3  = 3 \r\n      // arrOfCurrButtons[3] = 4 + 1 = 5\r\n      // or \r\n      // [1, 2, 3, 4, 5, \"...\", 10].length = 7 - 3 = 4\r\n      // [1, 2, 3, 4, 5, \"...\", 10][4] = 5 + 1 = 6\r\n      setCurrentButton(arrOfCurrButtons[arrOfCurrButtons.length-3] + 1) \r\n    }\r\n    else if (currentButton === dotsRight) {\r\n      setCurrentButton(arrOfCurrButtons[3] + 2)\r\n    }\r\n\r\n    else if (currentButton === dotsLeft) {\r\n      setCurrentButton(arrOfCurrButtons[3] - 2)\r\n    }\r\n\r\n    setArrOfCurrButtons(tempNumberOfPages)\r\n    setCurrentPage(currentButton)\r\n  }, [currentButton])\r\n\r\n\r\n  return (\r\n    <div className=\"pagination-container\">\r\n      <a\r\n        href=\"#\"\r\n        className={`${currentButton === 1 ? 'disabled' : ''}`}\r\n        onClick={() => setCurrentButton(prev => prev <= 1 ? prev : prev - 1)}\r\n      >\r\n        Prev\r\n      </a>\r\n\r\n      {arrOfCurrButtons.map(((item, index) => {\r\n        return <a\r\n          href=\"#\"\r\n          key={index}\r\n          className={`${currentButton === item ? 'active' : ''}`}\r\n          onClick={() => setCurrentButton(item)}\r\n        >\r\n          {item}\r\n        </a>\r\n      }))}\r\n\r\n      <a\r\n        href=\"#\"\r\n        className={`${currentButton === numberOfPages.length ? 'disabled' : ''}`}\r\n        onClick={() => setCurrentButton(prev => prev >= numberOfPages.length ? prev : prev + 1)}\r\n      >\r\n        Next\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Pagination\r\n","import React from 'react'\r\n\r\nfunction Posts({posts}) {\r\n  return (\r\n    <ul className=\"list-group my-4\">\r\n      {posts.map((post, index) => {\r\n        return (<li key={index} className=\"list-group-item\">{post.title}</li>)\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Posts\r\n","import React, { useState, useEffect } from 'react';\nimport Pagination from './Pagination'\nimport axios from 'axios'\nimport Posts from './components/Posts'\nfunction App() {\n  const [posts, setPosts] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage] = useState(10)\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true)\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n      setPosts(res.data)\n      setLoading(false)\n    }\n\n    fetchPosts()\n  }, [])\n\n  if (loading && posts.length === 0) {\n    return <h2>Loading...</h2>\n  }\n  //Get current posts\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost)\n  const howManyPages = Math.ceil(posts.length/postsPerPage)\n  \n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-primary mb-3\">My Blog</h1>\n      <Posts posts={currentPosts}/> \n      <Pagination pages = {howManyPages} setCurrentPage={setCurrentPage}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}